@inject ITaskManager TaskManager
@inject NavigationManager NavigationManager

<div class="container-fluid">
    @if (TaskExists)
    {
        <SubmitButton Title="Update" OnSubmit="@UpdateTask"/>
        <CancelButton Title="Delete" OnCancel="@DeleteTask"/>
    }
    else
    {
        <SubmitButton Title="Create" OnSubmit="@CreateTask"/>
        <CancelButton Title="Cancel" OnCancel="@GoBack"/>
    }

    <AddComponentButton/>
</div>

@code
{
    [CascadingParameter]
    public TaskEditingState TaskEditingState { get; set; }

    [CascadingParameter]
    public Todo Todo { get; set; }

    [CascadingParameter]
    public bool TaskExists { get; set; }

    private async Task CreateTask()
    {
        if (!TaskEditingState.AddedTasks.Contains(Todo))
        {
            TaskEditingState.AddedTasks.Add(Todo);
        }
        await TaskManager.ApplyChanges(TaskEditingState);
        GoBack();
    }

    private async Task UpdateTask()
    {
        if (!TaskEditingState.ModifiedTasks.Contains(Todo))
        {
            TaskEditingState.ModifiedTasks.Add(Todo);
        }
        await TaskManager.ApplyChanges(TaskEditingState);
        GoBack();
    }

    private async Task DeleteTask()
    {
        if (!TaskEditingState.RemovedTasks.Contains(Todo))
        {
            TaskEditingState.RemovedTasks.Add(Todo);
        }
        await TaskManager.ApplyChanges(TaskEditingState);
        GoBack();
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/overview");
    }
}
